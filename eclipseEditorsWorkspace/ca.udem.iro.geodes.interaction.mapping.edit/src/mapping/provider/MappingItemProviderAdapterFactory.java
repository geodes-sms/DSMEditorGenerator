/**
 */
package mapping.provider;

import java.util.ArrayList;
import java.util.Collection;

import mapping.util.MappingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MappingItemProviderAdapterFactory extends MappingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MappingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.MappingDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingDiagramItemProvider mappingDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.MappingDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingDiagramAdapter() {
		if (mappingDiagramItemProvider == null) {
			mappingDiagramItemProvider = new MappingDiagramItemProvider(this);
		}

		return mappingDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.EditorInputEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditorInputEventItemProvider editorInputEventItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.EditorInputEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditorInputEventAdapter() {
		if (editorInputEventItemProvider == null) {
			editorInputEventItemProvider = new EditorInputEventItemProvider(this);
		}

		return editorInputEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.PlatformInputEventCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformInputEventCodeItemProvider platformInputEventCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.PlatformInputEventCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformInputEventCodeAdapter() {
		if (platformInputEventCodeItemProvider == null) {
			platformInputEventCodeItemProvider = new PlatformInputEventCodeItemProvider(this);
		}

		return platformInputEventCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.EditorOutputEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditorOutputEventItemProvider editorOutputEventItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.EditorOutputEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditorOutputEventAdapter() {
		if (editorOutputEventItemProvider == null) {
			editorOutputEventItemProvider = new EditorOutputEventItemProvider(this);
		}

		return editorOutputEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.PlatformOutputEventCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformOutputEventCodeItemProvider platformOutputEventCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.PlatformOutputEventCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformOutputEventCodeAdapter() {
		if (platformOutputEventCodeItemProvider == null) {
			platformOutputEventCodeItemProvider = new PlatformOutputEventCodeItemProvider(this);
		}

		return platformOutputEventCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.PlatformIElementCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformIElementCodeItemProvider platformIElementCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.PlatformIElementCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformIElementCodeAdapter() {
		if (platformIElementCodeItemProvider == null) {
			platformIElementCodeItemProvider = new PlatformIElementCodeItemProvider(this);
		}

		return platformIElementCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.PlatformLElementCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformLElementCodeItemProvider platformLElementCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.PlatformLElementCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformLElementCodeAdapter() {
		if (platformLElementCodeItemProvider == null) {
			platformLElementCodeItemProvider = new PlatformLElementCodeItemProvider(this);
		}

		return platformLElementCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.PlatformControllCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformControllCodeItemProvider platformControllCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.PlatformControllCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformControllCodeAdapter() {
		if (platformControllCodeItemProvider == null) {
			platformControllCodeItemProvider = new PlatformControllCodeItemProvider(this);
		}

		return platformControllCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.PlatformOutputControllCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformOutputControllCodeItemProvider platformOutputControllCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.PlatformOutputControllCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformOutputControllCodeAdapter() {
		if (platformOutputControllCodeItemProvider == null) {
			platformOutputControllCodeItemProvider = new PlatformOutputControllCodeItemProvider(this);
		}

		return platformOutputControllCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.PlatformInputControllCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformInputControllCodeItemProvider platformInputControllCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.PlatformInputControllCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformInputControllCodeAdapter() {
		if (platformInputControllCodeItemProvider == null) {
			platformInputControllCodeItemProvider = new PlatformInputControllCodeItemProvider(this);
		}

		return platformInputControllCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mapping.CodeLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeLineItemProvider codeLineItemProvider;

	/**
	 * This creates an adapter for a {@link mapping.CodeLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeLineAdapter() {
		if (codeLineItemProvider == null) {
			codeLineItemProvider = new CodeLineItemProvider(this);
		}

		return codeLineItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mappingDiagramItemProvider != null) mappingDiagramItemProvider.dispose();
		if (editorInputEventItemProvider != null) editorInputEventItemProvider.dispose();
		if (platformInputEventCodeItemProvider != null) platformInputEventCodeItemProvider.dispose();
		if (editorOutputEventItemProvider != null) editorOutputEventItemProvider.dispose();
		if (platformOutputEventCodeItemProvider != null) platformOutputEventCodeItemProvider.dispose();
		if (platformIElementCodeItemProvider != null) platformIElementCodeItemProvider.dispose();
		if (platformLElementCodeItemProvider != null) platformLElementCodeItemProvider.dispose();
		if (platformControllCodeItemProvider != null) platformControllCodeItemProvider.dispose();
		if (platformOutputControllCodeItemProvider != null) platformOutputControllCodeItemProvider.dispose();
		if (platformInputControllCodeItemProvider != null) platformInputControllCodeItemProvider.dispose();
		if (codeLineItemProvider != null) codeLineItemProvider.dispose();
	}

}
