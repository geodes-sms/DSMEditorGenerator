/**
 * generated by Xtext 2.19.0
 */
package ca.udem.iro.geodes.interaction.interactiontxt.impl;

import ca.udem.iro.geodes.interaction.interactiontxt.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class InteractiontxtFactoryImpl extends EFactoryImpl implements InteractiontxtFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static InteractiontxtFactory init()
  {
    try
    {
      InteractiontxtFactory theInteractiontxtFactory = (InteractiontxtFactory)EPackage.Registry.INSTANCE.getEFactory(InteractiontxtPackage.eNS_URI);
      if (theInteractiontxtFactory != null)
      {
        return theInteractiontxtFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new InteractiontxtFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InteractiontxtFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case InteractiontxtPackage.MODEL: return createModel();
      case InteractiontxtPackage.CA_ELEMENT: return createCAElement();
      case InteractiontxtPackage.CELEMENT: return createCElement();
      case InteractiontxtPackage.AELEMENT: return createAElement();
      case InteractiontxtPackage.INTERACTION: return createInteraction();
      case InteractiontxtPackage.CONDITION: return createCondition();
      case InteractiontxtPackage.START_TRANSITION: return createStartTransition();
      case InteractiontxtPackage.TRANSITION: return createTransition();
      case InteractiontxtPackage.ACTION: return createAction();
      case InteractiontxtPackage.CI_ELEMENT: return createCIElement();
      case InteractiontxtPackage.CL_ELEMENT: return createCLElement();
      case InteractiontxtPackage.CCANVAS: return createCCanvas();
      case InteractiontxtPackage.CV_ELEMENT: return createCVElement();
      case InteractiontxtPackage.AI_ELEMENT: return createAIElement();
      case InteractiontxtPackage.AO_ELEMENT: return createAOElement();
      case InteractiontxtPackage.AL_ELEMENT: return createALElement();
      case InteractiontxtPackage.ACANVAS: return createACanvas();
      case InteractiontxtPackage.AV_ELEMENT: return createAVElement();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CAElement createCAElement()
  {
    CAElementImpl caElement = new CAElementImpl();
    return caElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CElement createCElement()
  {
    CElementImpl cElement = new CElementImpl();
    return cElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AElement createAElement()
  {
    AElementImpl aElement = new AElementImpl();
    return aElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interaction createInteraction()
  {
    InteractionImpl interaction = new InteractionImpl();
    return interaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartTransition createStartTransition()
  {
    StartTransitionImpl startTransition = new StartTransitionImpl();
    return startTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CIElement createCIElement()
  {
    CIElementImpl ciElement = new CIElementImpl();
    return ciElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CLElement createCLElement()
  {
    CLElementImpl clElement = new CLElementImpl();
    return clElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CCanvas createCCanvas()
  {
    CCanvasImpl cCanvas = new CCanvasImpl();
    return cCanvas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CVElement createCVElement()
  {
    CVElementImpl cvElement = new CVElementImpl();
    return cvElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AIElement createAIElement()
  {
    AIElementImpl aiElement = new AIElementImpl();
    return aiElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AOElement createAOElement()
  {
    AOElementImpl aoElement = new AOElementImpl();
    return aoElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ALElement createALElement()
  {
    ALElementImpl alElement = new ALElementImpl();
    return alElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ACanvas createACanvas()
  {
    ACanvasImpl aCanvas = new ACanvasImpl();
    return aCanvas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AVElement createAVElement()
  {
    AVElementImpl avElement = new AVElementImpl();
    return avElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InteractiontxtPackage getInteractiontxtPackage()
  {
    return (InteractiontxtPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static InteractiontxtPackage getPackage()
  {
    return InteractiontxtPackage.eINSTANCE;
  }

} //InteractiontxtFactoryImpl
