/*
 * generated by Xtext 2.19.0
 */
package ca.udem.iro.geodes.interaction.serializer;

import ca.udem.iro.geodes.interaction.interactiontxt.ACanvas;
import ca.udem.iro.geodes.interaction.interactiontxt.AIElement;
import ca.udem.iro.geodes.interaction.interactiontxt.ALElement;
import ca.udem.iro.geodes.interaction.interactiontxt.AOElement;
import ca.udem.iro.geodes.interaction.interactiontxt.AVElement;
import ca.udem.iro.geodes.interaction.interactiontxt.CCanvas;
import ca.udem.iro.geodes.interaction.interactiontxt.CIElement;
import ca.udem.iro.geodes.interaction.interactiontxt.CLElement;
import ca.udem.iro.geodes.interaction.interactiontxt.CVElement;
import ca.udem.iro.geodes.interaction.interactiontxt.Condition;
import ca.udem.iro.geodes.interaction.interactiontxt.Interaction;
import ca.udem.iro.geodes.interaction.interactiontxt.InteractiontxtPackage;
import ca.udem.iro.geodes.interaction.interactiontxt.Model;
import ca.udem.iro.geodes.interaction.interactiontxt.StartTransition;
import ca.udem.iro.geodes.interaction.interactiontxt.Transition;
import ca.udem.iro.geodes.interaction.services.InteractiontxtGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class InteractiontxtSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private InteractiontxtGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == InteractiontxtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case InteractiontxtPackage.ACANVAS:
				sequence_ACanvas(context, (ACanvas) semanticObject); 
				return; 
			case InteractiontxtPackage.AI_ELEMENT:
				sequence_AIElement(context, (AIElement) semanticObject); 
				return; 
			case InteractiontxtPackage.AL_ELEMENT:
				sequence_ALElement(context, (ALElement) semanticObject); 
				return; 
			case InteractiontxtPackage.AO_ELEMENT:
				sequence_AOElement(context, (AOElement) semanticObject); 
				return; 
			case InteractiontxtPackage.AV_ELEMENT:
				sequence_AVElement(context, (AVElement) semanticObject); 
				return; 
			case InteractiontxtPackage.ACTION:
				sequence_Action(context, (ca.udem.iro.geodes.interaction.interactiontxt.Action) semanticObject); 
				return; 
			case InteractiontxtPackage.CCANVAS:
				sequence_CCanvas(context, (CCanvas) semanticObject); 
				return; 
			case InteractiontxtPackage.CI_ELEMENT:
				sequence_CIElement(context, (CIElement) semanticObject); 
				return; 
			case InteractiontxtPackage.CL_ELEMENT:
				sequence_CLElement(context, (CLElement) semanticObject); 
				return; 
			case InteractiontxtPackage.CV_ELEMENT:
				sequence_CVElement(context, (CVElement) semanticObject); 
				return; 
			case InteractiontxtPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case InteractiontxtPackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case InteractiontxtPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case InteractiontxtPackage.START_TRANSITION:
				sequence_StartTransition(context, (StartTransition) semanticObject); 
				return; 
			case InteractiontxtPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CAElement returns ACanvas
	 *     AElement returns ACanvas
	 *     ACanvas returns ACanvas
	 *
	 * Constraint:
	 *     value=EString?
	 */
	protected void sequence_ACanvas(ISerializationContext context, ACanvas semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns AIElement
	 *     AElement returns AIElement
	 *     AIElement returns AIElement
	 *
	 * Constraint:
	 *     (id=EString value=EString?)
	 */
	protected void sequence_AIElement(ISerializationContext context, AIElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns ALElement
	 *     AElement returns ALElement
	 *     ALElement returns ALElement
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         (
	 *             (
	 *                 (operation='add' | operation='rem' | operation=EString) 
	 *                 (((value+='focusElement' | value+=EString) (value+='focusElement' | value+=EString)) | value+='focusElement' | value+=EString)?
	 *             ) | 
	 *             value+=EString
	 *         )?
	 *     )
	 */
	protected void sequence_ALElement(ISerializationContext context, ALElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns AOElement
	 *     AElement returns AOElement
	 *     AOElement returns AOElement
	 *
	 * Constraint:
	 *     (operation=EString (value='focusElement' | value=EString | value=EString)?)
	 */
	protected void sequence_AOElement(ISerializationContext context, AOElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns AVElement
	 *     AElement returns AVElement
	 *     AVElement returns AVElement
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         (
	 *             ((operation='copy' | operation=EString) (value='focusElement' | value=EString)) | 
	 *             (value=EString operation='"') | 
	 *             value='focusElement' | 
	 *             value=EString | 
	 *             element=[CAElement|EString]
	 *         )?
	 *     )
	 */
	protected void sequence_AVElement(ISerializationContext context, AVElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (id=EString? elements+=AElement* transition=Transition?)
	 */
	protected void sequence_Action(ISerializationContext context, ca.udem.iro.geodes.interaction.interactiontxt.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns CCanvas
	 *     CElement returns CCanvas
	 *     CCanvas returns CCanvas
	 *
	 * Constraint:
	 *     ((isNegative?='not' | isFocus?='focus')? value=EString?)
	 */
	protected void sequence_CCanvas(ISerializationContext context, CCanvas semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns CIElement
	 *     CElement returns CIElement
	 *     CIElement returns CIElement
	 *
	 * Constraint:
	 *     ((isNegative?='not' | isFocus?='focus')? id=EString ((value=EString operation='"') | value='focusElement' | value=EString)?)
	 */
	protected void sequence_CIElement(ISerializationContext context, CIElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns CLElement
	 *     CElement returns CLElement
	 *     CLElement returns CLElement
	 *
	 * Constraint:
	 *     ((isNegative?='not' | isFocus?='focus')? id=EString ((value=EString operation='"') | value='focusElement' | value=EString)?)
	 */
	protected void sequence_CLElement(ISerializationContext context, CLElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAElement returns CVElement
	 *     CElement returns CVElement
	 *     CVElement returns CVElement
	 *
	 * Constraint:
	 *     (
	 *         (isNegative?='not' | isFocus?='focus')? 
	 *         id=EString 
	 *         (((value='focusElement' | value=EString | value=EString) element=[CAElement|EString]?) | element=[CAElement|EString])?
	 *     )
	 */
	protected void sequence_CVElement(ISerializationContext context, CVElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (id=EString? elements+=CElement* transition=StartTransition)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=EString condition=Condition)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InteractiontxtPackage.Literals.INTERACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InteractiontxtPackage.Literals.INTERACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, InteractiontxtPackage.Literals.INTERACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InteractiontxtPackage.Literals.INTERACTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteractionAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInteractionAccess().getConditionConditionParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     interactions+=Interaction+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StartTransition returns StartTransition
	 *
	 * Constraint:
	 *     (event=EString action+=Action)
	 */
	protected void sequence_StartTransition(ISerializationContext context, StartTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     action+=Action
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
