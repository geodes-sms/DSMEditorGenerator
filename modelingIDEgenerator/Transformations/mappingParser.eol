//mapping
// csv version
//var mappingModel = Row.all;

var mappingRoot =  new MappingM!MappingDiagram;
var editorInputEvent;

var eventMap = new Map;

var rawFile = new Native("java.io.File")(inputFile);
var file = new Native("java.util.Scanner")(rawFile);

while (file.hasNextLine()) {
	var field = file.nextLine().split("#");
// csv version
//for (m in mappingModel) {
	switch (field.at(0)){
		case "C" : ControllMapping(field.at(1),field.at(2));
		case "O" : OutputEventMapping(field.at(1),field.at(2));
		case "I" : InputEventMapping(field.at(1),field.at(2));
		case "L" : LanguageEventMapping(field.at(1),field.at(2));
	}	 
}

file.close();

operation InputEventMapping(events,code){
	var platform = new MappingM!PlatformInputEventCode;
	platform.listnerCode += String2CodeLine(code);
	
	var event;
	for(e in events.split(",")){
		if(eventMap.containsKey(e)){
			event = eventMap.get(e);
		}else{
			event = new MappingM!EditorInputEvent;
			eventMap.put(e,event);
			event.event = e;
		}
		event.platform.add(platform);
	}
}

operation OutputEventMapping(events,code){
	var platform = new MappingM!PlatformOutputEventCode;
	platform.raiseCode = String2CodeLine(code);
	
	var event;
	for(e in events.split(",")){
		if(eventMap.containsKey(e)){
			event = eventMap.get(e);
		}else{
			event = new MappingM!EditorOutputEvent;
			eventMap.put(e,event);
			event.`operation` = e; //event.operation
		}
		event.platform.add(platform);
	}
}

operation LanguageEventMapping(event,code){
	var platform;
	platform = MappingM.getAllOfType(MappingM!PlatformLElementCode).first();
	if(platform == null){
		platform = new MappingM!PlatformLElementCode;
	}
	switch (event){
		case "create": platform.createCode = String2CodeLine(code);
		case "update": platform.updateCode = String2CodeLine(code);
		case "delete": platform.deleteCode = String2CodeLine(code);
		case "get": platform.updateCode = String2CodeLine(code);
//		default: return false;
	}
}

operation ControllMapping(event,code){
	var platform;
	platform = MappingM.select(c|c.isTypeOf(MappingM!PlatformControllCode)).first();
	if(platform == null){
		platform = new MappingM!PlatformControllCode;
	}
	platform.heatherCode = String2CodeLine(code);
	
	switch (event){
		case "heather": platform.heatherCode = String2CodeLine(code);
		case "footer": platform.updateCode = String2CodeLine(code);
		case "seperator": platform.deleteCode = String2CodeLine(code);
		default: platform.heatherCode = String2CodeLine(code);
	}
}

operation String2CodeLine(code) : OrderedSet{
	var codeLine = new MappingM!CodeLine;
	codeLine.line = code;
	return codeLine.asOrderedSet();
}